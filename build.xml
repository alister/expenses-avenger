<?xml version="1.0" encoding="UTF-8"?>

<project name="Ca.symfony-ci" default="build">
    <target name="build"
        depends="prepare,composer-run-install,php-lint-ci,jshint-ci,phpcpd-ci,php-security-checker,phpunit-ci,behat-ci"/>   <!-- phpmd-ci,phpcs-ci,sami, -->
    <target name="short"
        depends="prepare,phpunit"/>  <!-- ,behat -->
    <target name="manual"
        depends="prepare,composer-run-install,php-lint-ci,jshint-ci,phpcs,phpcpd-ci,php-security-checker,phpunit,behat"/>   <!-- phpmd-ci, -->

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="build/artifacts/coverage"/>
        <delete dir="build/artifacts/logs"/>
        <delete dir="app/cache/test"/>
        <delete dir="app/cache/dev"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="build/artifacts/coverage"/>
        <mkdir dir="build/artifacts/logs"/>
    </target>

    <target name="check-composer">
        <available file="composer.phar" property="composer.installed"/>
    </target>

    <target name="composer-install" depends="check-composer" unless="composer.installed">
        <get src="http://getcomposer.org/composer.phar" dest="composer.phar"/>
    </target>

    <target name="composer-update" depends="composer-install">
        <exec executable="php" failonerror="true">
            <arg line="composer.phar self-update"/>
        </exec>
    </target>

    <target name="composer-run-install" depends="composer-update">
        <exec executable="php" failonerror="true">
            <arg line="composer.phar install"/>
        </exec>
    </target>

    <target name="get-changeset.php.raw"
            description="creates a list of changed php files separated by newline">
        <pathconvert property="changeset.php.raw" pathsep="${line.separator}">
            <fileset dir="src">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </pathconvert>

        <!--Check if files are modified-->
        <condition property="changeset.php.notempty">
            <not>
                <equals arg1="${changeset.php.raw}" arg2="" trim="true"/>
            </not>
        </condition>
    </target>

    <target name="get-changeset.php.spacesep" depends="get-changeset.php.raw" if="changeset.php.notempty"
            description="Creates a quoted list of changed php files separated by spaces">
        <loadresource property="changeset.php.spacesep">
            <propertyresource name="changeset.php.raw"/>
            <filterchain>
                <tokenfilter delimoutput=" ">
                    <linetokenizer/>
                    <replaceregex pattern="^" replace='"'/>
                    <replaceregex pattern="$" replace='"'/>
                </tokenfilter>
            </filterchain>
        </loadresource>
    </target>

    <target name="php-lint-ci" depends="get-changeset.php.spacesep" if="changeset.php.notempty"
            description="Perform syntax check of sourcecode files in parallel">
        <exec executable="sh" failonerror="true">
            <arg value="-c"/>
            <arg value="echo '${changeset.php.spacesep}' | xargs -n 1 -P 4 php -l 1>/dev/null"/>
        </exec>
        <echo message="OK"/>
    </target>

    <target name="jshint-ci">
        <!-- <exec executable="node" failonerror="true" output="build/artifacts/logs/checkstyle-jshint.xml">
            <arg value="vendor/bin/jshint"/>
            <arg value="- -config=.jshintrc"/>
                        <arg value="- -reporter=checkstyle"/>
                        <arg value="web/js"/>
        </exec> -->
    </target>

    <target name="php-security-checker" description="Check your composer dependencies for insecure components">
        <exec executable="vendor/bin/security-checker" failonerror="false">
            <arg value="security:check"/>
            <arg value="--verbose"/>
            <arg value="composer.lock"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="vendor/bin/phpmd" failonerror="false">
            <arg path="src"/>
            <arg value="xml"/>
            <arg value="phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg value="build/artifacts/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="vendor/bin/phpcs" failonerror="false">
            <arg value="--report-checkstyle=build/artifacts/logs/checkstyle-php.xml"/>
            <arg value="--report=full"/>
            <arg value="--standard=phpcs.xml"/>
            <!-- Don't show warnings-->
            <arg value="--warning-severity=0"/>
            <arg value="--extensions=php"/>
            <arg path="src"/>
        </exec>
    </target>

    <?comment
        vendor/bin/phpcs -a --report=full --standard=phpcs.xml --warning-severity=0 --extensions=php src
    ?>
    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer putputting to screen">
        <exec executable="vendor/bin/phpcs" failonerror="false">
            <arg value="-a"/>
            <arg value="--report=full"/>
            <arg value="--standard=phpcs.xml"/>
            <!-- Don't show warnings-->
            <arg value="--warning-severity=0"/>
            <arg value="--extensions=php"/>
            <arg path="src"/>
        </exec>
    </target>

    <target name="phpcpd-ci" description="Find duplicate code using PHPCPD">
        <exec executable="vendor/bin/phpcpd" failonerror="false">
            <arg value="--log-pmd"/>
            <arg value="build/artifacts/logs/pmd-cpd.xml"/>
            <arg path="src"/>
        </exec>
    </target>

    <target name="phpunit-ci" description="Run unit tests with PHPUnit">
        <exec executable="vendor/bin/phpunit" failonerror="true">
            <arg line="--configuration=${basedir}/phpunit.xml.dist"/>
            <arg line="--coverage-html=build/artifacts/coverage"/>
            <arg line="--log-junit=build/artifacts/logs/junit.xml"/>
            <arg line="--coverage-clover=build/artifacts/logs/clover.xml"/>
            <arg line="--coverage-text"/>
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="vendor/bin/phpunit" failonerror="true">
            <arg line="--configuration=${basedir}/phpunit.xml.dist"/>
            <arg line="--coverage-text"/>
        </exec>
    </target>

    <target name="behat-ci" depends="clean">
        <exec executable="php" failonerror="true">
            <arg line="vendor/bin/behat"/>
            <arg line="--config=./behat.yml.dist" />
            <arg line="--profile=ci" />
            <arg line="--format=progress"/>
            <arg line="--no-colors"/>
            <arg line="--no-interaction"/>
            <arg line="${basedir}/features" />
        </exec>
    </target>

    <target name="behat" depends="clean">
        <exec executable="php" failonerror="true">
            <arg line="vendor/bin/behat"/>
            <arg line="--config=./behat.yml" />
            <arg line="--profile=default" />
            <arg line="--format=progress"/>
            <arg line="--tags=~skip"/>
            <arg line="${basedir}/features" />
        </exec>
    </target>

 <!-- generate api documentation using sami -->
 <target name="sami">
    <!-- <echo>Invoking bundled sami: ${basedir}/vendor/bin/sami.php</echo> -->
    <exec executable="php">
        <arg line="/usr/local/bin/sami --no-interaction update ./sami-cfg.php --force"/>
    </exec>
 </target>

</project>
